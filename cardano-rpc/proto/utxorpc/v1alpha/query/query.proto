/// A consistent view of the state of the ledger

syntax = "proto3";

package utxorpc.v1alpha.query;

import "google/protobuf/field_mask.proto";
import "utxorpc/v1alpha/cardano/cardano.proto";

// Represents a specific point in the blockchain.
message ChainPoint {
  uint64 slot = 1; // Slot number.
  bytes hash = 2; // Block hash.
  uint64 height = 3; // Block height.
  uint64 timestamp = 4; // Block ms timestamp
}

// Represents a reference to a transaction output
message TxoRef {
  bytes hash = 1; // Tx hash.
  uint32 index = 2; // Output index.
}

message TxoRefArray {
  // TODO u5c: changed to repeated
  repeated TxoRef items = 1;
}

// Request to get the chain parameters
message ReadParamsRequest {
  google.protobuf.FieldMask field_mask = 1; // Field mask to selectively return fields in the parsed response.
}

// An evenlope that holds parameter data from any of the compatible chains
message AnyChainParams {
  oneof params {
    utxorpc.v1alpha.cardano.PParams cardano = 1; // Cardano parameters
  }
}

// Response containing the chain parameters
message ReadParamsResponse {
  AnyChainParams values = 1; // The value of the parameters.
  ChainPoint ledger_tip = 2; // The chain point that represent the ledger current position.
}

// TODO u5c: new type
message AddressArray {
  repeated bytes items = 1;
}

// An evenlope that holds an UTxO from any of compatible chains
message AnyUtxoData {
  bytes native_bytes = 1; // Original bytes as defined by the chain
  TxoRef txo_ref = 2; // Hash of the previous transaction.
  oneof parsed_state {
    utxorpc.v1alpha.cardano.TxOutput cardano = 3; // A cardano UTxO
  }
}

// Request to get specific UTxOs
message ReadUtxosRequest {
  // TODO u5c: new oneof
  oneof query_args {
    TxoRefArray txoRefs = 1; // Array of Tx Output references
    AddressArray addresses = 2; // Array of addresses
  }
  google.protobuf.FieldMask field_mask = 3; // Field mask to selectively return fields.
}

// Response containing the UTxOs associated with the requested addresses.
message ReadUtxosResponse {
  repeated AnyUtxoData items = 1; // List of UTxOs.
  ChainPoint ledger_tip = 2; // The chain point that represent the ledger current position.
}

// Service definition for querying the state of the chain.
service QueryService {
  rpc ReadParams(ReadParamsRequest) returns (ReadParamsResponse); // Get overall chain state.
  rpc ReadUtxos(ReadUtxosRequest) returns (ReadUtxosResponse); // Read specific UTxOs by reference.
}
