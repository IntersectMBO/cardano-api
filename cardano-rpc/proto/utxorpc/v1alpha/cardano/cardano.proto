syntax = "proto3";

package utxorpc.v1alpha.cardano;

// Represents a transaction output in the Cardano blockchain.
message TxOutput {
  bytes address = 1; // Address receiving the output.
  uint64 coin = 2 [jstype = JS_STRING]; // Amount of ADA in the output.
  repeated MultiAsset assets = 3; // Additional native (non-ADA) assets in the output.
  Datum datum = 4; // Plutus data associated with the output.
  Script script = 5; // Script associated with the output.
}

// TODO u5c: new type - https://github.com/utxorpc/spec/pull/167
message AddressArray {
  repeated bytes items = 1;
}

message Datum {
  bytes hash = 1; // Hash of this datum as seen on-chain
  PlutusData payload = 2; // Parsed Plutus data payload
  bytes original_cbor = 3; // Original cbor-encoded data as seen on-chain
}

// Represents a custom asset in the Cardano blockchain.
message Asset {
  bytes name = 1; // Name of the custom asset.
  oneof quantity {
    uint64 output_coin = 2 [jstype = JS_STRING]; // Quantity of the custom asset in case of an output.
    int64 mint_coin = 3 [jstype = JS_STRING]; // Quantity of the custom asset in case of a mint.
  }
}

// TODO u5c: redeemer was removed
// Represents a multi-asset group in the Cardano blockchain.
message MultiAsset {
  bytes policy_id = 1; // Policy ID governing the custom assets.
  repeated Asset assets = 2; // List of custom assets.
}

// Represents a native script in Cardano.
message NativeScript {
  oneof native_script {
    bytes script_pubkey = 1; // Script based on an address key hash.
    NativeScriptList script_all = 2; // Script that requires all nested scripts to be satisfied.
    NativeScriptList script_any = 3; // Script that requires any of the nested scripts to be satisfied.
    ScriptNOfK script_n_of_k = 4; // Script that requires k out of n nested scripts to be satisfied.
    uint64 invalid_before = 5; // Slot number before which the script is invalid.
    uint64 invalid_hereafter = 6; // Slot number after which the script is invalid.
  }
}

// Represents a list of native scripts.
message NativeScriptList {
  repeated NativeScript items = 1; // List of native scripts.
}

// Represents a "k out of n" native script.
message ScriptNOfK {
  uint32 k = 1; // The number of required satisfied scripts.
  repeated NativeScript scripts = 2; // List of native scripts.
}

// Represents a constructor for Plutus data in Cardano.
message Constr {
  uint32 tag = 1;
  uint64 any_constructor = 2;
  repeated PlutusData fields = 3;
}

// Represents a big integer for Plutus data in Cardano.
message BigInt {
  oneof big_int {
    int64 int = 1 [jstype = JS_STRING];
    bytes big_u_int = 2;
    bytes big_n_int = 3;
  }
}


// Represents a key-value pair for Plutus data in Cardano.
message PlutusDataPair {
  PlutusData key = 1; // Key of the pair.
  PlutusData value = 2; // Value of the pair.
}

// Represents a Plutus data item in Cardano.
message PlutusData {
  oneof plutus_data {
    Constr constr = 2; // Constructor.
    PlutusDataMap map = 3; // Map of Plutus data.
    BigInt big_int = 4; // Big integer.
    bytes bounded_bytes = 5; // Bounded bytes.
    PlutusDataArray array = 6; // Array of Plutus data.
  }
}

// Represents a map of Plutus data in Cardano.
message PlutusDataMap {
  repeated PlutusDataPair pairs = 1; // List of key-value pairs.
}

// Represents an array of Plutus data in Cardano.
message PlutusDataArray {
  repeated PlutusData items = 1; // List of Plutus data items.
}


// Represents a script in Cardano.
message Script {
  oneof script {
    NativeScript native = 1; // Native script.
    bytes plutus_v1 = 2; // Plutus V1 script.
    bytes plutus_v2 = 3; // Plutus V2 script.
    bytes plutus_v3 = 4; // Plutus V3 script.
  }
}

// Represents a rational number as a fraction.
// TODO u5c increased precision to 64 bits
message RationalNumber {
  int64 numerator = 1 [jstype = JS_STRING];
  uint64 denominator = 2 [jstype = JS_STRING];
}

// PARAMS
// ======

message ExUnits {
  uint64 steps = 1;
  uint64 memory = 2;
}

message ExPrices {
  RationalNumber steps = 1;
  RationalNumber memory = 2;
}

message ProtocolVersion {
  uint32 major = 1;
  uint32 minor = 2;
}

message CostModel {
  repeated int64 values = 1;
}

message CostModels {
  CostModel plutus_v1 = 1;
  CostModel plutus_v2 = 2;
  CostModel plutus_v3 = 3;
}

message VotingThresholds {
  repeated RationalNumber thresholds = 1;
}

message PParams {
  uint64 coins_per_utxo_byte = 1 [jstype = JS_STRING]; // The number of coins per UTXO byte.
  uint64 max_tx_size = 2 [jstype = JS_STRING]; // The maximum transaction size.
  uint64 min_fee_coefficient = 3 [jstype = JS_STRING]; // The minimum fee coefficient.
  uint64 min_fee_constant = 4 [jstype = JS_STRING]; // The minimum fee constant.
  uint64 max_block_body_size = 5 [jstype = JS_STRING]; // The maximum block body size.
  uint64 max_block_header_size = 6 [jstype = JS_STRING]; // The maximum block header size.
  uint64 stake_key_deposit = 7 [jstype = JS_STRING]; // The stake key deposit.
  uint64 pool_deposit = 8 [jstype = JS_STRING]; // The pool deposit.
  uint64 pool_retirement_epoch_bound = 9; // The pool retirement epoch bound.
  uint64 desired_number_of_pools = 10; // The desired number of pools.
  RationalNumber pool_influence = 11; // The pool influence.
  RationalNumber monetary_expansion = 12; // The monetary expansion.
  RationalNumber treasury_expansion = 13; // The treasury expansion.
  uint64 min_pool_cost = 14 [jstype = JS_STRING]; // The minimum pool cost.
  ProtocolVersion protocol_version = 15; // The protocol version.
  uint64 max_value_size = 16 [jstype = JS_STRING]; // The maximum value size.
  uint64 collateral_percentage = 17 [jstype = JS_STRING]; // The collateral percentage.
  uint64 max_collateral_inputs = 18 [jstype = JS_STRING]; // The maximum collateral inputs.
  CostModels cost_models = 19; // The cost models.
  ExPrices prices = 20; // The prices.
  ExUnits max_execution_units_per_transaction = 21; // The maximum execution units per transaction.
  ExUnits max_execution_units_per_block = 22; // The maximum execution units per block.
  RationalNumber min_fee_script_ref_cost_per_byte = 23; // The minimum fee per script reference byte.
  VotingThresholds pool_voting_thresholds = 24; // The pool voting thresholds.
  VotingThresholds drep_voting_thresholds = 25; // The drep voting thresholds.
  uint32 min_committee_size = 26; // The minimum committee size.
  uint64 committee_term_limit = 27; // The committee term limit.
  uint64 governance_action_validity_period = 28; // The governance action validity period.
  uint64 governance_action_deposit = 29 [jstype = JS_STRING]; // The governance action deposit.
  uint64 drep_deposit = 30 [jstype = JS_STRING]; // The drep deposit.
  uint64 drep_inactivity_period = 31; // The drep inactivity period.
}

